// ********************************
// ** auto generated pixelshader **
// ********************************

#define SHADER_EDITOR_2013_COMPILE


// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Samplers
sampler _Sampler_00		: register( s0 );
sampler _Sampler_01		: register( s1 );
sampler _Sampler_02		: register( s2 );
sampler _Sampler_03		: register( s3 );

// Constants
const float g_cData_Random137		: register( c16 ); 		// Random gen
const float _g_Time		: register( c17 );
const float2 g_cData_Random139		: register( c18 ); 		// Random gen

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
	float2 vTexCoord_2			:	TEXCOORD2;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float _var0 = float( 0.500000 ) - g_cData_Random137;
	float _var1 = float( 3.500000 ) * _g_Time;
	float _var2 = In.vTexCoord_0.x;
	float _var3 = float( 0.100000 ) * _g_Time;
	float2 _var4 = In.vTexCoord_0 * float2( 1.000000, 0.250000 );
	float _var5 = float( 5.000000 ) * _g_Time;
	float _var6 = In.vTexCoord_0.y;
	float _var7 = frac( _g_Time );
	float _var8 = _g_Time * float( 3.000000 );
	float _var9 = _g_Time * float( 4.000000 );
	float _var10 = float( 10.000000 ) * _g_Time;
	float2 _var11 = In.vTexCoord_0 - float( 0.500000 );
	float2 _var12 = In.vTexCoord_0 * float( 4.000000 );
	float2 _var13 = In.vTexCoord_0 * In.vTexCoord_2;
	_var0 = float( 0.005000 ) * _var0;
	_var1 = frac( _var1 );
	_var2 = _var2 - float( 0.500000 );
	float2 _var14 = float2( _var3.x, 0.000000 );
	float2 _var15 = _var3.xx;
	float2 _var16 = float2( _var5.x, 0.000000 );
	float2 _var17 = float2( _var7, float( 0.300000 ) );
	float2 _var18 = float2( _var8, _var9 );
	_var10 = frac( _var10 );
	float _var19 = length( _var11 );
	float _var20 = tex2D( _Sampler_00, _var12 ).g;
	_var13 = _var13 + g_cData_Random139;
	float2 _var21 = float2( 0.000000, _var0.x );
	float _var22 = float( 0.040000 ) * _var1;
	float _var23 = pow( _var1, float( 3.000000 ) );
	_var2 = abs( _var2 );
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float rot_def = float( 0.0f );
		float fs = sin( rot_def );
		float fc = cos( rot_def );
		float4 row_0 = float4( fc * float2( 0.001000, 0.300000 ).x, -fs * float2( 0.001000, 0.300000 ).x, 0, ( -center_def.x * fc + center_def.y * fs ) * float2( 0.001000, 0.300000 ).x + center_def.x + _var14.x );
		float4 row_1 = float4( fs * float2( 0.001000, 0.300000 ).y, fc * float2( 0.001000, 0.300000 ).y, 0, ( -center_def.x * fs - center_def.y * fc ) * float2( 0.001000, 0.300000 ).y + center_def.y + _var14.y );
		_var14.x = dot( float4( In.vTexCoord_0, 0, 1 ), row_0 );
		_var14.y = dot( float4( In.vTexCoord_0, 0, 1 ), row_1 );
	}
	float2 _var24 = _var15 * float2( -1.000000, 1.000000 );
	float2 _var25;
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float rot_def = float( 0.0f );
		float fs = sin( rot_def );
		float fc = cos( rot_def );
		float4 row_0 = float4( fc * float2( 0.300000, 0.001000 ).x, -fs * float2( 0.300000, 0.001000 ).x, 0, ( -center_def.x * fc + center_def.y * fs ) * float2( 0.300000, 0.001000 ).x + center_def.x + _var15.x );
		float4 row_1 = float4( fs * float2( 0.300000, 0.001000 ).y, fc * float2( 0.300000, 0.001000 ).y, 0, ( -center_def.x * fs - center_def.y * fc ) * float2( 0.300000, 0.001000 ).y + center_def.y + _var15.y );
		_var25.x = dot( float4( In.vTexCoord_0, 0, 1 ), row_0 );
		_var25.y = dot( float4( In.vTexCoord_0, 0, 1 ), row_1 );
	}
	_var4 = _var4 + _var16;
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float fs = sin( _g_Time );
		float fc = cos( _g_Time );
		float4 row_0 = float4( fc * _var17.x, -fs * _var17.x, 0, ( -center_def.x * fc + center_def.y * fs ) * _var17.x + center_def.x + _var18.x );
		float4 row_1 = float4( fs * _var17.y, fc * _var17.y, 0, ( -center_def.x * fs - center_def.y * fc ) * _var17.y + center_def.y + _var18.y );
		_var17.x = dot( float4( In.vTexCoord_0, 0, 1 ), row_0 );
		_var17.y = dot( float4( In.vTexCoord_0, 0, 1 ), row_1 );
	}
	_var19 = _var6 * _var19;
	_var20 = round( _var20 );
	float _var26 = tex2D( _Sampler_00, _var13 ).r;
	_var21 = In.vTexCoord_0 + _var21;
	float2 _var27 = float2( _var22.x, 0.000000 );
	_var23 = 1.0f - _var23;
	_var2 = smoothstep( float( 0.750000 ), float( -1.000000 ), _var2 );
	float _var28 = tex2D( _Sampler_01, _var14 ).r;
	float _var29 = tex2D( _Sampler_01, _var25 ).g;
	float _var30 = tex2D( _Sampler_01, _var4 ).g;
	float _var31 = tex2D( _Sampler_02, _var17 ).r;
	_var19 = _var19 - float( 0.200000 );
	_var20 = _var20 - _var26;
	float4 _var32 = tex2D( _Sampler_03, _var21 ).rgba;
	_var27 = _var21 + _var27;
	_var28 = smoothstep( float( 0.400000 ), float( 0.500000 ), _var28 );
	_var29 = smoothstep( float( 0.990000 ), float( 1.000000 ), _var29 );
	_var31 = _var31 - float( 0.500000 );
	float4 _var33 = _var19 * float4( 0.800000, 0.760000, 0.650000, 0.000000 );
	_var20 = abs( _var20 );
	float4 _var34 = tex2D( _Sampler_03, _var27 ).rgba;
	_var28 = float( 0.600000 ) * _var28;
	_var24 = _var27 + _var24;
	_var29 = _var29 * _var30;
	_var31 = abs( _var31 );
	_var33 = _var10 * _var33;
	_var20 = _var20 * float( 0.400000 );
	_var28 = _var2 * _var28;
	float _var35 = tex2D( _Sampler_02, _var24 ).r;
	_var29 = _var29 * _var6;
	_var31 = smoothstep( float( 0.380000 ), float( 0.370000 ), _var31 );
	_var20 = _var20 + float( 0.800000 );
	float _var36 = _var2 - _var28;
	_var35 = smoothstep( float( 0.600000 ), float( 0.700000 ), _var35 );
	_var29 = _var29 * float( 0.330000 );
	_var31 = max( _var31, float( 0.800000 ) );
	_var23 = _var23 * _var36;
	_var35 = _var35 * _var28;
	_var29 = 1.0f - _var29;
	_var32 = lerp( _var32, _var34, _var23 );
	_var35 = float( 0.200000 ) * _var35;
	float _var37 = _var32.x;
	float4 _var38 = float4( _var32.x, _var32.y, _var32.z, 1.000000 );
	float _var39 = _var32.y;
	float _var40 = _var32.z;
	float4 _var41 = _var37 * float4( 1.000000, 0.950000, 0.800000, 1.000000 );
	_var39 = max( _var37, _var39 );
	_var39 = max( _var39, _var40 );
	_var39 = pow( _var39, float( 2.000000 ) );
	_var39 = smoothstep( float( 0.200000 ), float( 1.800000 ), _var39 );
	_var41 = lerp( _var41, _var38, _var39 );
	_var41 = _var41 - _var35;
	_var41 = _var41 * _var29;
	_var41 = _var41 * _var31;
	_var41 = _var41 + _var33;
	_var41 = _var41 * _var20;
	Out.vColor_0 = _var41;
	return Out;
}